@page "/search"
@inject NavigationManager NavigationManager
@using System.Web
@using GOCore
@inject IAuctionService AuctionService
@inject ICatalogService CatalogService
@inject IBiddingService BiddingService

<PageTitle>Søg Auktioner – Grøn & Olsen</PageTitle>

<link href="css/search.css" rel="stylesheet" />
<link rel="stylesheet" href="css/styles.css" />

<div class="search-layout">
    <aside class="sidebar">
        <h4>Kategorier</h4>
        <ul>
            <li @onclick="@(() => OnCategorySelected(""))" class="@((selectedCategory == "") ? "active" : "")">Alle kategorier</li>
            @foreach (var category in categories)
            {
                <li @onclick="@(() => OnCategorySelected(category))" class="@((selectedCategory == category) ? "active" : "")">@category</li>
            }
        </ul>

        <h4 style="margin-top: 2rem;">Auktionshuse</h4>
        <ul>
            <li @onclick="@(() => OnAuctionHouseSelected(""))" class="@((selectedAuctionHouse == "") ? "active" : "")">Alle huse</li>
            @foreach (var house in auctionHouses)
            {
                <li @onclick="@(() => OnAuctionHouseSelected(house))" class="@((selectedAuctionHouse == house) ? "active" : "")">@house</li>
            }
        </ul>
    </aside>


    <main class="auction-content">
        <div class="auction-header">
            <h3 class="crimson-text-bold">Alle auktioner</h3>
            <div class="sort-dropdown">
                <label>Sortér efter:</label>
                <select @bind="selectedSort">
                    <option value="highestBid">Højeste bud</option>
                    <option value="lowestBid">Laveste bud</option>
                    <option value="endingSoon">Slutter snart</option>
                    <option value="lowestEstimate">Laveste vurdering</option>
                    <option value="highestEstimate">Højeste vurdering</option>
                </select>
                <button @onclick="ApplyFilters">Anvend</button>
            </div>
        </div>

        <div class="results-grid">
            @if (filteredAuctions.Any())
            {
                @foreach (var auction in filteredAuctions)
                {
                    var item = itemLookup.GetValueOrDefault(auction.ItemId);

                    if (item is not null)
                    {
                        <div class="auction-card" @onclick="@(() => NavigateToAuction(auction.Id))">
                            <img src="@((item.Images?.FirstOrDefault()) ?? "/images/placeholder.jpg")" alt="@item.Name" />
                            <div class="auction-details">
                                <h4>@Shorten(item.Name, 45)</h4>
                                <p class="time-left">@GetTimeLeft(auction.AuctionEnd)</p>
                                <p class="price">@((bidLookup.GetValueOrDefault(auction.Id)?.Amount ?? 0).ToString("N0")) DKK</p>
                            </div>
                        </div>
                    }
                }
            }
            else
            {
                <p>Ingen auktioner matcher dine filtre.</p>
            }
        </div>
    </main>
</div>

@code {
    private Dictionary<Guid, Bidding?> highestBids = new();
    private string selectedCategory = "";
    private string selectedAuctionHouse = "";
    private string selectedSort = "popular";

    private List<string> categories = new();
    private List<string> auctionHouses = new();

    private List<Auction> allAuctions = new();
    private List<Auction> filteredAuctions = new();

    private Dictionary<Guid, Item> itemLookup = new();
    private Dictionary<Guid, Bidding?> bidLookup = new();
    private Dictionary<Guid, string> auctionHouseLookup = new();

    protected override async Task OnInitializedAsync()
    {
        allAuctions = await AuctionService.GetAllAuctionsAsync();
        var allItems = await CatalogService.GetAllItemsAsync();
        var allAuctionHouses = await AuctionService.GetAllAuctionHouses();

        // Build lookup data
        itemLookup = allItems.ToDictionary(i => i.Id, i => i);
        auctionHouseLookup = allAuctionHouses.ToDictionary(h => h.Id, h => h.Name);

        // Get highest bids
        foreach (var auction in allAuctions)
        {
            var bid = await BiddingService.GetHighestBidAsync(auction.Id.ToString());
            highestBids[auction.Id] = bid;

            if (auction.HighestBidId != Guid.Empty)
            {
                bidLookup[auction.Id] = bid;
            }
            else
            {
                bidLookup[auction.Id] = null;
            }
        }

        // Filter categories and auction houses
        categories = allItems
            .Select(i => i.Category)
            .Where(c => !string.IsNullOrWhiteSpace(c))
            .Distinct()
            .ToList();

        auctionHouses = allItems
            .Select(i => auctionHouseLookup.GetValueOrDefault(i.AuctionHouseId))
            .Where(n => !string.IsNullOrWhiteSpace(n))
            .Distinct()
            .ToList();

        // Handle search query
        var uri = NavigationManager.ToAbsoluteUri(NavigationManager.Uri);
        var query = HttpUtility.ParseQueryString(uri.Query).Get("query");

        var categoryParam = HttpUtility.ParseQueryString(uri.Query).Get("category");
        if (!string.IsNullOrWhiteSpace(categoryParam))
        {
            selectedCategory = categoryParam;
        }

        var auctionHouseParam = HttpUtility.ParseQueryString(uri.Query).Get("auctionHouse");
        if (!string.IsNullOrWhiteSpace(auctionHouseParam))
        {
            selectedAuctionHouse = auctionHouseParam;
        }


        if (!string.IsNullOrWhiteSpace(query))
        {
            allAuctions = allAuctions
                .Where(a =>
                {
                    var item = itemLookup.GetValueOrDefault(a.ItemId);
                    return item != null && item.Name.Contains(query, StringComparison.OrdinalIgnoreCase);
                })
                .ToList();
        }

       await ApplyFilters();
    }


    private async Task ApplyFilters()
    {
        IEnumerable<Auction> auctionsToFilter = allAuctions;

        if (!string.IsNullOrEmpty(selectedCategory))
        {
            // Hent kun items i den valgte kategori
            var categoryItems = await CatalogService.GetItemsByCategoryAsync(selectedCategory);
            var matchingItemIds = categoryItems.Select(i => i.Id).ToHashSet();

            // Filtrér auktioner baseret på de items
            auctionsToFilter = auctionsToFilter.Where(a => matchingItemIds.Contains(a.ItemId));
        }

        if (!string.IsNullOrEmpty(selectedAuctionHouse))
        {
            auctionsToFilter = auctionsToFilter.Where(a =>
            {
                var item = itemLookup.GetValueOrDefault(a.ItemId);
                return item != null &&
                       auctionHouseLookup.GetValueOrDefault(item.AuctionHouseId)?
                       .Equals(selectedAuctionHouse, StringComparison.OrdinalIgnoreCase) == true;
            });
        }

        filteredAuctions = selectedSort switch
        {
            "highestBid" => auctionsToFilter.OrderByDescending(a => bidLookup.GetValueOrDefault(a.Id)?.Amount ?? 0).ToList(),
            "lowestBid" => auctionsToFilter.OrderBy(a => bidLookup.GetValueOrDefault(a.Id)?.Amount ?? 0).ToList(),
            "endingSoon" => auctionsToFilter.OrderBy(a => a.AuctionEnd).ToList(),
            "lowestEstimate" => auctionsToFilter.OrderBy(a => itemLookup.GetValueOrDefault(a.ItemId)?.Value ?? 0).ToList(),
            "highestEstimate" => auctionsToFilter.OrderByDescending(a => itemLookup.GetValueOrDefault(a.ItemId)?.Value ?? 0).ToList(),
            _ => auctionsToFilter.OrderByDescending(a => a.AuctionEnd).ToList()
        };
    }



    private void NavigateToAuction(Guid id)
    {
        NavigationManager.NavigateTo($"/auction/{id}");
    }

    private string GetTimeLeft(DateTime endTime)
    {
        var span = endTime - DateTime.Now;
        if (span.TotalSeconds <= 0) return "Auktionen er slut";
        if (span.TotalMinutes < 1) return $"{span.Seconds} sek";
        if (span.TotalHours < 1) return $"{span.Minutes} min";
        if (span.TotalDays < 1) return $"{span.Hours}t {span.Minutes}m";
        return $"{(int)span.TotalDays}d {span.Hours}t";
    }

    private string Shorten(string text, int max)
    {
        return string.IsNullOrEmpty(text) || text.Length <= max ? text : text.Substring(0, max) + "...";
    }

    private async Task OnCategorySelected(string category)
    {
        selectedCategory = category;
        await ApplyFilters();
    }

    private async Task OnAuctionHouseSelected(string house)
    {
        selectedAuctionHouse = house;
        await ApplyFilters();
    }
}
