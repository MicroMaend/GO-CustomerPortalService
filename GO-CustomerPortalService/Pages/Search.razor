@page "/search"
@inject NavigationManager NavigationManager
@using GOCore
@inject IAuctionService AuctionHttpService
@inject ICatalogService CatalogService
@inject IUserService UserService
@inject IBiddingService BiddingService

<PageTitle>Søg Auktioner – Grøn & Olsen</PageTitle>

<link href="css/search.css" rel="stylesheet" />
<link rel="stylesheet" href="css/styles.css" />

<div class="search-layout">
    <!-- VENSTREMENU -->
    <aside class="sidebar">
        <h4>Kategorier</h4>
        <ul>
            <li @onclick="@(() => selectedCategory = "")" class="@((selectedCategory == "") ? "active" : "")">Alle kategorier</li>
            @foreach (var category in categories)
            {
                <li @onclick="@(() => selectedCategory = category)" class="@((selectedCategory == category) ? "active" : "")">@category</li>
            }
        </ul>

        <h4 style="margin-top: 2rem;">Auktionshuse</h4>
        <ul>
            <li @onclick="@(() => selectedAuctionHouse = "")" class="@((selectedAuctionHouse == "") ? "active" : "")">Alle huse</li>
            @foreach (var house in auctionHouses)
            {
                <li @onclick="@(() => selectedAuctionHouse = house)" class="@((selectedAuctionHouse == house) ? "active" : "")">@house</li>
            }
        </ul>
    </aside>

    <!-- HØJRE INHOLD -->
    <main class="auction-content">
        <div class="auction-header">
            <h3 class="crimson-text-bold">Alle auktioner</h3>
            <div class="sort-dropdown">
                <label>Sortér efter:</label>
                <select @bind="selectedSort">
                    <option value="highestBid">Højeste bud</option>
                    <option value="lowestBid">Laveste bud</option>
                    <option value="endingSoon">Slutter snart</option>
                    <option value="lowestEstimate">Laveste vurdering</option>
                    <option value="highestEstimate">Højeste vurdering</option>
                </select>
                <button @onclick="ApplyFilters">Anvend</button>
            </div>
        </div>

        <div class="results-grid">
            @if (filteredAuctions.Any())
            {
                @foreach (var auction in filteredAuctions)
                {
                    var item = itemLookup.GetValueOrDefault(auction.Id);
                    var bid = bidLookup.GetValueOrDefault(auction.Id);
                    var house = item != null ? auctionHouseLookup.GetValueOrDefault(item.AuctionHouseId) : null;

                    if (item == null || house == null) continue;

                    <div class="auction-card" @onclick="@(() => NavigateToAuction(auction.Id))">
                        <img src="@((item.Images?.FirstOrDefault()) ?? "/images/placeholder.jpg")" alt="@item.Name" />
                        <div class="auction-details">
                            <h4>@Shorten(item.Name, 45)</h4>
                            <p class="time-left">@GetTimeLeft(auction.AuctionEnd)</p>
                            <p class="price">@((bid?.Amount ?? 0).ToString("N0")) DKK</p>
                            <p class="house-name">@house.Name</p>
                        </div>
                    </div>
                }
            }
            else
            {
                <p>Ingen auktioner matcher dine filtre.</p>
            }
        </div>
    </main>
</div>

@code {
    private string selectedCategory = "";
    private string selectedAuctionHouse = "";
    private string selectedSort = "popular";

    private List<string> categories = new();
    private List<string> auctionHouses = new();

    private List<Auction> allAuctions = new();
    private List<Auction> filteredAuctions = new();

    private Dictionary<Guid, Item> itemLookup = new();
    private Dictionary<Guid, Bidding?> bidLookup = new();
    private Dictionary<Guid, AuctionHouse> auctionHouseLookup = new();

    protected override async Task OnInitializedAsync()
    {
        allAuctions = await AuctionHttpService.GetAllAuctionsAsync();

        foreach (var auction in allAuctions)
        {
            var item = await CatalogService.GetItemByIdAsync(auction.ItemId.ToString());
            itemLookup[auction.Id] = item;

            if (auction.HighestBidId != Guid.Empty)
            {
                var bid = await BiddingService.GetHighestBidAsync(auction.Id.ToString());
                bidLookup[auction.Id] = bid;
            }
            else
            {
                bidLookup[auction.Id] = null;
            }

            if (item != null && !auctionHouseLookup.ContainsKey(item.AuctionHouseId))
            {
                var house = await AuctionHttpService.GetAuctionHouseById(item.AuctionHouseId);
                if (house != null)
                    auctionHouseLookup[item.AuctionHouseId] = house;
            }
        }

        categories = itemLookup.Values
            .Select(i => i.Category)
            .Where(c => !string.IsNullOrWhiteSpace(c))
            .Distinct()
            .ToList();

        auctionHouses = auctionHouseLookup.Values
            .Select(h => h.Name)
            .Distinct()
            .ToList();

        ApplyFilters();
    }

    private void NavigateToAuction(Guid id)
    {
        NavigationManager.NavigateTo($"/auction/{id}");
    }

    private void ApplyFilters()
    {
        filteredAuctions = allAuctions
            .Where(a =>
            {
                var item = itemLookup.GetValueOrDefault(a.Id);
                if (item == null) return false;

                var matchesCategory = string.IsNullOrEmpty(selectedCategory) ||
                    string.Equals(item.Category?.Trim(), selectedCategory.Trim(), StringComparison.OrdinalIgnoreCase);

                var houseMatch = auctionHouseLookup.TryGetValue(item.AuctionHouseId, out var house) &&
                    (string.IsNullOrEmpty(selectedAuctionHouse) ||
                     string.Equals(house?.Name, selectedAuctionHouse, StringComparison.OrdinalIgnoreCase));

                return matchesCategory && houseMatch;
            })
            .ToList();

        filteredAuctions = selectedSort switch
        {
            "highestBid" => filteredAuctions.OrderByDescending(a => bidLookup.GetValueOrDefault(a.Id)?.Amount ?? 0).ToList(),
            "lowestBid" => filteredAuctions.OrderBy(a => bidLookup.GetValueOrDefault(a.Id)?.Amount ?? 0).ToList(),
            "endingSoon" => filteredAuctions.OrderBy(a => a.AuctionEnd).ToList(),
            "lowestEstimate" => filteredAuctions.OrderBy(a => itemLookup.GetValueOrDefault(a.Id)?.Value ?? 0).ToList(),
            "highestEstimate" => filteredAuctions.OrderByDescending(a => itemLookup.GetValueOrDefault(a.Id)?.Value ?? 0).ToList(),
            _ => filteredAuctions.OrderByDescending(a => a.AuctionEnd).ToList()
        };
    }

    private string GetTimeLeft(DateTime endTime)
    {
        var span = endTime - DateTime.Now;
        if (span.TotalSeconds <= 0) return "Auktionen er slut";
        if (span.TotalMinutes < 1) return $"{span.Seconds} sek";
        if (span.TotalHours < 1) return $"{span.Minutes} min";
        if (span.TotalDays < 1) return $"{span.Hours}t {span.Minutes}m";
        return $"{(int)span.TotalDays}d {span.Hours}t";
    }

    private string Shorten(string text, int max)
    {
        return string.IsNullOrEmpty(text) || text.Length <= max ? text : text.Substring(0, max) + "...";
    }
}
