@page "/login"
@inject Blazored.LocalStorage.ILocalStorageService localStorage
@inject HttpClient Http
@inject NavigationManager NavigationManager

<PageTitle>Grøn & Olsen</PageTitle>

<head>
    <link rel="stylesheet" href="css/login.css" />
    <link rel="stylesheet" href="css/styles.css" />
</head>

<div class="login-container">
    <h3 class="crimson-text-bold">Login</h3>
    <div class="form-group">
        <label>Brugernavn</label>
        <input class="form-control" @bind="username" placeholder="Indtast brugernavn" />
    </div>
    <div class="form-group">
        <label>Adgangskode</label>
        <input type="password" class="form-control" @bind="password" placeholder="Indtast adgangskode" />
    </div>
    <div class="form-group">
        <button class="btn btn-primary" @onclick="LoginUser">Login</button>
        <button class="btn btn-secondary" @onclick="NavigateToCreateAccount">Opret Bruger</button>
    </div>
    @if (!string.IsNullOrEmpty(errorMessage))
    {
        <div class="alert alert-danger">@errorMessage</div>
    }
</div>

@code {
    private string username = string.Empty;
    private string password = string.Empty;
    private string errorMessage;

    private class TokenResponse
{
    public string Token { get; set; }
}

private async Task LoginUser()
{
    errorMessage = string.Empty;

    try
    {
        // Brug din AuthHttpService i stedet for direkte HTTP kald
        var token = await authService.LoginAsync(username, password);

        if (!string.IsNullOrEmpty(token))
        {
            await localStorage.SetItemAsync("authToken", token);
            NavigationManager.NavigateTo("/", forceLoad: true);
            StateHasChanged();
        }
        else
        {
            errorMessage = "Invalid username or password.";
        }
    }
    catch (Exception ex)
    {
        errorMessage = $"Login failed: {ex.Message}";
    }
}
{
    errorMessage = string.Empty;

    try
    {
        var loginRequest = new { Username = username, Password = password };
        var response = await Http.PostAsJsonAsync("api/auth/login", loginRequest);

        if (response.IsSuccessStatusCode)
        {
            var tokenResponse = await response.Content.ReadFromJsonAsync<TokenResponse>();

            if (tokenResponse != null && !string.IsNullOrEmpty(tokenResponse.Token))
            {
                await localStorage.SetItemAsync("authToken", tokenResponse.Token);
                NavigationManager.NavigateTo("/",forceLoad: true);
                StateHasChanged();
            }
            else
            {
                errorMessage = "Login failed: Token was empty.";
            }
        }
        else
        {
            errorMessage = "Invalid username or password.";
        }
    }
    catch (Exception ex)
    {
        errorMessage = $"Login failed: {ex.Message}";
    }
}


    private void NavigateToCreateAccount()
    {
        NavigationManager.NavigateTo("/register");
    }
}