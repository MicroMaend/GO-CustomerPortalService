@page "/"
@inject NavigationManager NavigationManager
@using System.Web
@using GOCore
@inject IAuctionService AuctionService
@inject ICatalogService CatalogService
@inject IBiddingService BiddingService

<PageTitle>Grøn & Olsen</PageTitle>

<link href="css/home.css" rel="stylesheet" />
<link rel="stylesheet" href="css/styles.css" />

<!-- Navbar -->
<nav class="navbar">
    <div class="navbar">
        <div class="categories">
            <a href="/search" class="crimson-text-bold">
                <span class="material-symbols-outlined">palette</span> <!-- Ikon for kunst -->
                Kunst
            </a>
            <a href="/search" class="crimson-text-bold">
                <span class="material-symbols-outlined">watch</span> <!-- Ikon for smykker -->
                Ure
            </a>
            <a href="/search" class="crimson-text-bold">
                <span class="material-symbols-outlined">local_bar</span> <!-- Ikon for møbler -->
                Glas
            </a>
            <a href="/search" class="crimson-text-bold">
                <span class="material-symbols-outlined">coffee</span> <!-- Ikon for antikviteter -->
                Porcelæn
            </a>
            <a href="/search" class="crimson-text-bold">
                <span class="material-symbols-outlined">devices</span> <!-- Ikon for elektronik -->
                Elektronik
            </a>
            <a href="/search" class="crimson-text-bold">
                <span class="material-symbols-outlined">cards_star</span> <!-- Ikon for bøger -->
                Samlerobjekter
            </a>
            <a href="/search" class="crimson-text-bold">
                <span class="material-symbols-outlined">diamond</span> <!-- Ikon for køretøjer -->
                Luksustilbehør
            </a>
            <a href="/search" class="crimson-text-bold">
                <span class="material-symbols-outlined">checkroom</span> <!-- Ikon for tøj -->
                Mode
            </a>
            <a href="/search" class="crimson-text-bold">
                <span class="material-symbols-outlined">directions_car</span> <!-- Ikon for sport -->
                Køretøjer
            </a>
            <a href="/search" class="crimson-text-bold">
                <span class="material-symbols-outlined">music_note</span> <!-- Ikon for musik -->
                Musik
            </a>
            <a href="/search" class="crimson-text-bold">
                <span class="material-symbols-outlined">chair</span> <!-- Ikon for fotografi -->
                Møbler
            </a>

            <div class="dropdown">
                <button class="dropdown-button crimson-text-bold">
                    <span class="material-symbols-outlined">home</span>
                    Auktionshuse
                </button>
                <div class="dropdown-content">
                    <a href="/search" class="crimson-text-regular">Grøn & Olsen</a>
                    <a href="/search" class="crimson-text-regular">Nordic Auctions</a>
                    <a href="/search" class="crimson-text-regular">Heritage Auctions</a>
                </div>
            </div>

        </div>
    </div>


</nav>

<!-- Main Content -->
<main>
    <section class="auction-slider">
        <h2 class="crimson-text-bold">Fremhævede Auktioner</h2>
        <div class="slider-container">
            <button class="slider-arrow left-arrow" onclick="moveSlide(-1)">
                <span class="material-symbols-outlined">arrow_back</span>
            </button>
            <div class="slider">
                <!-- Her kan du indsætte de faktiske auktioner -->
                @foreach (var auction in filteredAuctions.Take(3))
                {
                    var item = itemLookup.GetValueOrDefault(auction.ItemId);
                    if (item != null)
                    {
                        <div class="slide">
                            <img src="@((item.Images?.FirstOrDefault()) ?? "/images/placeholder.jpg")" alt="@item.Name" />
                            <div class="slide-content">
                                <h3>@Shorten(item.Name, 45)</h3>
                                <p>@Shorten(item.Description, 100)</p>
                                <button @onclick="@(() => NavigationManager.NavigateTo($"/auction/{auction.Id}"))">Explore now</button>
                            </div>
                        </div>
                    }
                }
            </div>

            <!-- Flyt slider-dots her -->
            <div class="slider-dots">
                <span class="dot active" onclick="goToSlide(0)"></span>
                <span class="dot" onclick="goToSlide(1)"></span>
                <span class="dot" onclick="goToSlide(2)"></span>
            </div>

            <button class="slider-arrow right-arrow" onclick="moveSlide(1)">
                <span class="material-symbols-outlined">arrow_forward</span>
            </button>
        </div>

    </section>

    
    <section class="upcoming-auctions">
        <h2 class="crimson-text-bold">Kommende Auktioner</h2>
        <div class="upcoming-auctions-container">
            @foreach (var auction in upcoming.Take(3))
            {
                var item = itemLookup.GetValueOrDefault(auction.ItemId);
                if (item != null)
                {
                    <div class="auction-card">
                        <img src="@((item.Images?.FirstOrDefault()) ?? "/images/placeholder.jpg")" alt="@item.Name" />
                        <div class="auction-card-content">
                            <h3 class="crimson-text-semibold">@Shorten(item.Name, 45)</h3>
                            <p class="crimson-text-regular">@Shorten(item.Description, 100)</p>
                            <p class="auction-timer crimson-text-regular" data-start-time="@auction.AuctionStart">
                                Begynder om: <span>Loading...</span>
                            </p>
                        </div>
                        <button class="auction-card-button" @onclick="@(() => NavigationManager.NavigateTo($"/auction/{auction.Id}"))">Se Auktion</button>
                    </div>
                }
            }
        </div>
    </section>

    <script src="js/slider.js"></script>
    <script src="js/timer.js"></script>
</main>

@code {
    private Dictionary<Guid, Bidding?> highestBids = new();
    private string selectedCategory = "";
    private string selectedAuctionHouse = "";
    private string selectedSort = "popular";

    private List<string> categories = new();
    private List<string> auctionHouses = new();

    private List<Auction> allAuctions = new();
    private List<Auction> filteredAuctions = new();
    private List<Auction> upcoming => allAuctions
    .Where(a => a.AuctionEnd > DateTime.UtcNow)
    .OrderBy(a => a.AuctionEnd)
    .ToList();

    private Dictionary<Guid, Item> itemLookup = new();
    private Dictionary<Guid, Bidding?> bidLookup = new();
    private Dictionary<Guid, string> auctionHouseLookup = new();

    protected override async Task OnInitializedAsync()
    {
        allAuctions = await AuctionService.GetAllAuctionsAsync();
        var allItems = await CatalogService.GetAllItemsAsync();
        var allAuctionHouses = await AuctionService.GetAllAuctionHouses();

        // Build lookup data
        itemLookup = allItems.ToDictionary(i => i.Id, i => i);
        auctionHouseLookup = allAuctionHouses.ToDictionary(h => h.Id, h => h.Name);

        // Get highest bids
        foreach (var auction in allAuctions)
        {
            var bid = await BiddingService.GetHighestBidAsync(auction.Id.ToString());
            highestBids[auction.Id] = bid;

            if (auction.HighestBidId != Guid.Empty)
            {
                bidLookup[auction.Id] = bid;
            }
            else
            {
                bidLookup[auction.Id] = null;
            }
        }

        // Filter categories and auction houses
        categories = allItems
            .Select(i => i.Category)
            .Where(c => !string.IsNullOrWhiteSpace(c))
            .Distinct()
            .ToList();

        auctionHouses = allItems
            .Select(i => auctionHouseLookup.GetValueOrDefault(i.AuctionHouseId))
            .Where(n => !string.IsNullOrWhiteSpace(n))
            .Distinct()
            .ToList();

        // Handle search query
        var uri = NavigationManager.ToAbsoluteUri(NavigationManager.Uri);
        var query = HttpUtility.ParseQueryString(uri.Query).Get("query");

        if (!string.IsNullOrWhiteSpace(query))
        {
            allAuctions = allAuctions
                .Where(a =>
                {
                    var item = itemLookup.GetValueOrDefault(a.ItemId);
                    return item != null && item.Name.Contains(query, StringComparison.OrdinalIgnoreCase);
                })
                .ToList();
        }

        ApplyFilters();
    }
    private void ApplyFilters()
    {
        filteredAuctions = allAuctions
            .Where(a =>
            {
                var item = itemLookup.GetValueOrDefault(a.ItemId);
                if (item == null) return false;

                return (string.IsNullOrEmpty(selectedCategory) ||
                        string.Equals(item.Category?.Trim(), selectedCategory.Trim(), StringComparison.OrdinalIgnoreCase)) &&
                       (string.IsNullOrEmpty(selectedAuctionHouse) ||
                        auctionHouseLookup.GetValueOrDefault(item.AuctionHouseId)?.Equals(selectedAuctionHouse, StringComparison.OrdinalIgnoreCase) == true);
            })
            .ToList();

        filteredAuctions = selectedSort switch
        {
            "highestBid" => filteredAuctions.OrderByDescending(a => bidLookup.GetValueOrDefault(a.Id)?.Amount ?? 0).ToList(),
            "lowestBid" => filteredAuctions.OrderBy(a => bidLookup.GetValueOrDefault(a.Id)?.Amount ?? 0).ToList(),
            "endingSoon" => filteredAuctions.OrderBy(a => a.AuctionEnd).ToList(),
            "lowestEstimate" => filteredAuctions.OrderBy(a => itemLookup.GetValueOrDefault(a.ItemId)?.Value ?? 0).ToList(),
            "highestEstimate" => filteredAuctions.OrderByDescending(a => itemLookup.GetValueOrDefault(a.ItemId)?.Value ?? 0).ToList(),
            _ => filteredAuctions.OrderByDescending(a => a.AuctionEnd).ToList()
        };
    }
    private string Shorten(string text, int max)
    {
        return string.IsNullOrEmpty(text) || text.Length <= max ? text : text.Substring(0, max) + "...";
    }
	
}

