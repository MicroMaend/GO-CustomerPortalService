@page "/auction/{AuctionId:guid}"
@inject NavigationManager NavigationManager
@inject HttpClient Http
@inject IAuctionService AuctionHttpService
@inject ICatalogService CatalogService
@inject IUserService UserService
@inject IBiddingService BiddingService
@using GOCore

<PageTitle>Auktion – Grøn & Olsen</PageTitle>

<link href="css/auction.css" rel="stylesheet" />
<link rel="stylesheet" href="css/styles.css" />

@if (auction == null || item == null || auctionHouse == null)
{
    <p>Indlæser auktionen...</p>
}
else
{
    <div class="auctionpage-grid">
        <div class="gallery-section">
            <img class="main-image" src="@MainImage" alt="@item.Name" />
            <div class="thumbnails">
                @foreach (var img in item.Images)
                {
                    <img class="thumb @(img == MainImage ? "selected" : "")" src="@img" @onclick="@(() => MainImage = img)" />
                }
            </div>
        </div>

        <div class="details-section">
            <h1>@item.Name</h1>

            <div class="price-timer">
                <div>
                    <p class="label">Højeste bud</p>
                    <p class="price">@(highestBid?.Amount.ToString("N0") ?? "–") DKK</p>
                </div>
                <div>
                    <p class="label">Slutter om</p>
                    <p class="time">@GetTimeLeft(auction.AuctionEnd)</p>
                </div>
            </div>

            <div class="bid-input">
                <input type="number" min="@((highestBid?.Amount ?? 0) + 50)" @bind="amount" placeholder="Indtast dit bud" />
                <button class="bid-button" @onclick="SendBid">Byd nu</button>
            </div>

            <div class="meta">
                <p><strong>Vurdering:</strong> @item.Value.ToString("N0") DKK</p>
                <p><strong>Kategori:</strong> @item.Category</p>
                <p><strong>Stand:</strong> @item.Condition</p>
                <p><strong>Auktionshus:</strong> @auctionHouse.Name</p>
            </div>

            <div class="description">
                <h3>Beskrivelse</h3>
                <p>@item.Description</p>
            </div>
        </div>
    </div>
}

@code {
    [Parameter]
    public Guid AuctionId { get; set; }

    private string MainImage;
    private Auction? auction;
    private Item? item;
    private Bidding? highestBid;
    private AuctionHouse? auctionHouse;
    private int amount;

    protected override async Task OnInitializedAsync()
    {
        auction = await AuctionHttpService.GetByIdAsync(AuctionId);

        if (auction != null)
        {
            item = await CatalogService.GetItemByIdAsync(auction.ItemId.ToString());
            highestBid = auction.HighestBidId != Guid.Empty
                ? await BiddingService.GetHighestBidAsync(auction.Id.ToString())
                : null;

            amount = highestBid.Amount+ 50; // Minimum bid is current highest bid + 50 DKK
            
            if (item != null)
            {
                auctionHouse = await AuctionHttpService.GetAuctionHouseById(item.AuctionHouseId);
                MainImage = item.Images?.FirstOrDefault() ?? "/images/placeholder.jpg";
            }
        }
    }
    
    private async Task SendBid()
    {
        if (auction == null || item == null || highestBid == null) return;

        if (amount <= highestBid.Amount)
        {
            // Notify user that bid must be higher than current highest bid
            return;
        }

        var bid = new Bidding(amount, new Guid(), auction.Id);

        await BiddingService.PlaceBidAsync(bid);
        highestBid = await BiddingService.GetHighestBidAsync(auction.Id.ToString());
        amount = highestBid.Amount + 50; // Update amount for next bid
        StateHasChanged(); // Refresh the UI to show updated bid
    }

    private string GetTimeLeft(DateTime endTime)
    {
        var span = endTime - DateTime.Now;
        if (span.TotalSeconds <= 0) return "Auktionen er slut";
        if (span.TotalMinutes < 1) return $"{span.Seconds} sek";
        if (span.TotalHours < 1) return $"{span.Minutes} min";
        if (span.TotalDays < 1) return $"{span.Hours}t {span.Minutes}m";
        return $"{(int)span.TotalDays}d {span.Hours}t";
    }
}