@page "/auction/{AuctionId:guid}"
@using Blazored.LocalStorage
@inject NavigationManager NavigationManager
@inject HttpClient Http
@inject IAuctionService AuctionHttpService
@inject ICatalogService CatalogService
@inject IUserService UserService
@inject IBiddingService BiddingService
@inject ILocalStorageService LocalStorage
@using GOCore
@using System.Security.Claims
@using System.IdentityModel.Tokens.Jwt

<PageTitle>Auktion – Grøn & Olsen</PageTitle>

<link href="css/auction.css" rel="stylesheet" />
<link rel="stylesheet" href="css/styles.css" />

@if (auction == null || item == null || auctionHouse == null)
{
    <p>Indlæser auktionen...</p>
}
else
{
    <div class="auctionpage-grid">
        <div class="gallery-section">
            <img class="main-image" src="@MainImage" alt="@item.Name" />
            <div class="thumbnails">
                @foreach (var img in item.Images)
                {
                    <img class="thumb @(img == MainImage ? "selected" : "")" src="@img" @onclick="@(() => MainImage = img)" />
                }
            </div>
        </div>

        <div class="details-section">
            <h1>@item.Name</h1>

            <div class="price-timer">
                <div>
                    <p class="label">Højeste bud</p>
                    <p class="price">@(highestBid?.Amount.ToString("N0") ?? "–") DKK</p>
                </div>
                <div>
                    <p class="label">Slutter om</p>
                    <p class="time">@GetTimeLeft(auction.AuctionEnd)</p>
                </div>
            </div>

            <div class="bid-input">
                <input type="number" min="@((highestBid?.Amount ?? 0) + 50)" @bind="amount" placeholder="Indtast dit bud" />
                <button class="bid-button" @onclick="SendBid">Byd nu</button>
            </div>

            <div class="meta">
                <p><strong>Vurdering:</strong> @item.Value.ToString("N0") DKK</p>
                <p><strong>Kategori:</strong> @item.Category</p>
                <p><strong>Stand:</strong> @item.Condition</p>
                <p><strong>Auktionshus:</strong> @auctionHouse.Name</p>
            </div>

            <div class="description">
                <h3>Beskrivelse</h3>
                <p>@item.Description</p>
            </div>

            <div class="last-bids">
                <h3>De 3 nyeste bud</h3>
                @if (lastThreeBids.Count == 0)
                {
                    <p>Ingen bud endnu.</p>
                }
                else
                {
                    <ul>
                        @foreach (var bidWithUser in lastThreeBids)
                        {
                            <li>@bidWithUser.Username: @bidWithUser.Bid.Amount.ToString("N0") DKK (@bidWithUser.Bid.Date.ToLocalTime():g)</li>
                        }
                    </ul>
                }
            </div>
        </div>
    </div>
}

@code {
    [Parameter]
    public Guid AuctionId { get; set; }

    private string MainImage;
    private Auction? auction;
    private Item? item;
    private Bidding? highestBid;
    private AuctionHouse? auctionHouse;
    private int amount;

    private List<BidWithUser> lastThreeBids = new();

    protected override async Task OnInitializedAsync()
    {
        auction = await AuctionHttpService.GetByIdAsync(AuctionId);

        if (auction != null)
        {
            item = await CatalogService.GetItemByIdAsync(auction.ItemId.ToString());

            if (auction.HighestBidId != Guid.Empty)
            {
                highestBid = await BiddingService.GetHighestBidAsync(auction.Id.ToString());
            }

            amount = (highestBid?.Amount ?? 0) + 50;

            if (item != null)
            {
                auctionHouse = await AuctionHttpService.GetAuctionHouseById(item.AuctionHouseId);
                MainImage = item.Images?.FirstOrDefault() ?? "/images/placeholder.jpg";
            }

            // Hent alle bud for auktionen - brug din eksisterende metode
            var allBids = await BiddingService.GetBidsByAuctionIdAsync(auction.Id.ToString());

            // Tag de 3 nyeste bud
            var last3 = allBids.OrderByDescending(b => b.Date).Take(3).ToList();

            lastThreeBids.Clear();

            foreach (var bid in last3)
            {
                var user = await UserService.GetUserByIdAsync(bid.UserId.ToString());
                lastThreeBids.Add(new BidWithUser { Bid = bid, Username = user?.UserName ?? "Ukendt" });
            }
        }
    }

    private async Task SendBid()
    {
        if (auction == null || item == null) return;

        if (amount <= (highestBid?.Amount ?? 0))
        {
            Console.WriteLine("Bud er for lavt.");
            return;
        }

        var token = await LocalStorage.GetItemAsync<string>("authToken");
        if (string.IsNullOrEmpty(token))
        {
            NavigationManager.NavigateTo("/login");
            return;
        }

        Http.DefaultRequestHeaders.Authorization =
            new System.Net.Http.Headers.AuthenticationHeaderValue("Bearer", token);

        var userIdString = GetUserIdFromToken(token);
        if (!Guid.TryParse(userIdString, out var userId))
        {
            Console.WriteLine("Ugyldigt bruger-ID i token.");
            return;
        }

        try
        {
            var bid = new Bidding(amount, userId, auction.Id);
            await BiddingService.PlaceBidAsync(bid);

            highestBid = await BiddingService.GetHighestBidAsync(auction.Id.ToString());
            amount = highestBid.Amount + 50;

            StateHasChanged();
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Fejl under budgivning: {ex.Message}");
        }
    }

    private string? GetUserIdFromToken(string token)
    {
        var handler = new JwtSecurityTokenHandler();
        var jwtToken = handler.ReadJwtToken(token);
        return jwtToken.Claims.FirstOrDefault(c => c.Type == ClaimTypes.NameIdentifier || c.Type == "sub")?.Value;
    }

    private string GetTimeLeft(DateTime endTime)
    {
        var span = endTime - DateTime.Now;
        if (span.TotalSeconds <= 0) return "Auktionen er slut";
        if (span.TotalMinutes < 1) return $"{span.Seconds} sek";
        if (span.TotalHours < 1) return $"{span.Minutes} min";
        if (span.TotalDays < 1) return $"{span.Hours}t {span.Minutes}m";
        return $"{(int)span.TotalDays}d {span.Hours}t";
    }

    private class BidWithUser
    {
        public Bidding Bid { get; set; }
        public string Username { get; set; } = string.Empty;
    }
}
